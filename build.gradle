buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
        springLoadedVersion = '1.2.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath("net.saliman:gradle-cobertura-plugin:2.2.6")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.springframework:springloaded:$springLoadedVersion")
    }
}

import static java.nio.charset.Charset.defaultCharset

ext {
    droolsVersion = '6.2.0.Final'
}

group 'com.bhlangonijr'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.resources.srcDirs = ["src/main/resources"]

def jvmEncoding = defaultCharset().name()
if (jvmEncoding != "UTF-8") {
    throw new IllegalStateException("Build environment must be UTF-8 (it is: $jvmEncoding) - add '-Dfile.encoding=UTF-8' to the GRADLE_OPTS environment variable ")
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException("Must be built with Java 8 or higher")
}

compileJava.enabled = true

mainClassName = "com.bhlangonijr.Application"

springBoot {
    classifier = 'exec'
}

jar {
    baseName = "drools-dynamic"
    version = project.version
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "http://repo1.maven.org/maven2/" }
    maven { url "http://maven.restlet.org" }
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

def springVersion = "4.1.5.RELEASE"
def springIntegrationVersion = "4.1.2.RELEASE"
def springIntegrationDslVersion = "1.0.1.RELEASE"
def metricsVersion = "3.1.0"
def hystrixVersion = "1.4.9"

// Spring
ext.springFramework = "org.springframework:spring-context:$springVersion"
ext.springContextSupport = "org.springframework:spring-context-support:$springVersion"
ext.springBeans = "org.springframework:spring-beans:$springVersion"
ext.springBoot = "org.springframework.boot:spring-boot:$springBootVersion"

// Test dependencies
ext.junit = 'junit:junit:4.11'
ext.springTest = "org.springframework:spring-test:$springVersion"

// Hystrix
ext.hystrixCore = "com.netflix.hystrix:hystrix-core:${hystrixVersion}"
ext.hystrixMetricsPublisher = "com.netflix.hystrix:hystrix-servo-metrics-publisher:${hystrixVersion}"
ext.hystrixJavanica = "com.netflix.hystrix:hystrix-javanica:${hystrixVersion}"
ext.hystrixStream = "com.netflix.hystrix:hystrix-metrics-event-stream:${hystrixVersion}"

dependencies {
    compile springFramework
    compile springContextSupport
    compile springBeans
    compile springBoot
    compile hystrixCore
    compile hystrixJavanica
    compile hystrixStream
    compile hystrixMetricsPublisher

    compile("org.springframework.boot:spring-boot:$springBootVersion")
    compile("org.springframework.integration:spring-integration-core:$springIntegrationVersion")
    compile("org.springframework.integration:spring-integration-java-dsl:$springIntegrationDslVersion")
    compile("org.springframework.integration:spring-integration-stream:$springIntegrationVersion")
    compile("org.springframework.integration:spring-integration-rmi:$springIntegrationVersion")
    compile("org.springframework.integration:spring-integration-jmx:$springIntegrationVersion")
    compile("org.springframework.integration:spring-integration-amqp:$springIntegrationVersion")
    compile("org.springframework:spring-webmvc:$springVersion")
    //compile("org.springframework.security:spring-security-config:4.0.2.RELEASE")
    //compile("org.springframework.security:spring-security-web:4.0.2.RELEASE")

    compile("io.dropwizard.metrics:metrics-core:$metricsVersion")
    compile("io.dropwizard.metrics:metrics-healthchecks:$metricsVersion")
    compile("io.dropwizard.metrics:metrics-graphite:$metricsVersion")

    compile "com.fasterxml.jackson:jackson-parent:2.5"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.5.2"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.5.2"
    compile "javax.servlet:javax.servlet-api:3.1.0"

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile "org.kie:kie-api:$droolsVersion"
    compile "org.drools:drools-core:$droolsVersion"
    compile "org.drools:drools-compiler:$droolsVersion"
    compile "ch.qos.logback:logback-classic:1.1.3"

    testCompile junit
    testCompile springTest
    testCompile("org.springframework.boot:spring-boot-starter-test")
}
